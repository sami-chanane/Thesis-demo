name: PIPELINE

on:
  workflow_dispatch:
  push:
    branches:
    - master

env:
  IMAGE_REGISTERY: "ghcr.io"
  IMAGE_REPOSITORY: "${{ github.actor }}"
  IMAGE_NAME: "calculator-app"
  IMAGE_TAG: ${{ github.run_number }}
  DEPLOYMENT_DEFINITION_PATH: "$GITHUB_WORKSPACE/kubernetes/calculator-deployment.yaml"
  DEPLOYMENT_NAME: "calculator-deployment"

jobs:

  Lint-Master:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Get Code from Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Lint Code
        continue-on-error: true      # continue pipeline execution even if issues were found
        uses: super-linter/super-linter@v5.7.2
        env:
          DEFAULT_BRANCH: master
          VALIDATE_ALL_CODEBASE: false  # to lint only the new code
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}   # To report GitHub Actions status checks

  Scan-Repo:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write  # to upload sarif files
    steps:
      - name: Get Code from Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Trivy Security Scan for the Repo
        continue-on-error: true      # continue pipeline execution even if issues were found
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-scan-${{ env.IMAGE_TAG }}-repo.sarif'
          severity: 'HIGH,CRITICAL'
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-scan-${{ env.IMAGE_TAG }}-repo.sarif'
          category: trivy-repo-scan

  Unit-Tests:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Get Code from Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Test Application   # image tag does not matter because the image will be deleted when job in completed
        run: docker buildx build --target test-report --output type=local,dest=$(pwd) .       #--tag ${{ env.IMAGE_REGISTERY }}/${{ env.IMAGE_REPOSITORY }}/${{ env.IMAGE_NAME }}:test
      - name: Upload Test Reports
        uses: actions/upload-artifact@v3
        with:
          name: test-report-${{ env.IMAGE_TAG }}
          path: ./test-report.txt

  Build-Push-Image:
    needs: [Lint-Master, Scan-Repo, Unit-Tests]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Get Code from Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up QEMU     # necessary for multi-arch builds
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx      # necessary for multi-arch builds
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registery
        uses: docker/login-action@v3
        with:
          registry: ${{ env.IMAGE_REGISTERY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and Push to ${{ env.IMAGE_REGISTERY }}
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          target: "build-stage"
          # platforms: linux/amd64,linux/arm64,linux/arm/v7
          tags: ${{ env.IMAGE_REGISTERY }}/${{ env.IMAGE_REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

  Scan-Image:
    needs: [Build-Push-Image]
    runs-on: ubuntu-latest
    permissions:
      packages: read
      security-events: write  # to upload sarif files
    steps:
    - name: Trivy Security Scan for the Image
      continue-on-error: true      # continue pipeline execution even if issues were found
      uses: aquasecurity/trivy-action@master
      with: 
        image-ref: ${{ env.IMAGE_REGISTERY }}/${{ env.IMAGE_REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
        ignore-unfixed: true
        format: 'sarif'
        output: 'trivy-scan-${{ env.IMAGE_TAG }}-image.sarif'
        severity: 'HIGH,CRITICAL'
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-scan-${{ env.IMAGE_TAG }}-image.sarif'
        category: trivy-image-scan

  Sign-Image:
    needs: [Scan-Image]
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
    - name: Login to GitHub Container Registery
      uses: docker/login-action@v3
      with:
        registry: ${{ env.IMAGE_REGISTERY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Install Cosign
      uses: sigstore/cosign-installer@v3.3.0
      with:
        cosign-release: 'v2.2.2'
    - name: Sign Image with Cosign
      env:
        COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
        COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
      run: cosign sign --yes --key env://COSIGN_PRIVATE_KEY ${{ env.IMAGE_REGISTERY }}/${{ env.IMAGE_REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
    - name: Verify that the Image has been signed Successfully
      env:
        COSIGN_PUBLIC_KEY: ${{ secrets.COSIGN_PUBLIC_KEY }}
      run: |
        docker buildx imagetools inspect ${{ env.IMAGE_REGISTERY }}/${{ env.IMAGE_REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
        docker pull ${{ env.IMAGE_REGISTERY }}/${{ env.IMAGE_REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
        cosign verify --key env://COSIGN_PUBLIC_KEY ${{ env.IMAGE_REGISTERY }}/${{ env.IMAGE_REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
  
  Deploy-Image:
    needs: [Sign-Image]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    steps:
    - name: Get Code from Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

    - name: Update deployment file
      run: |
        sed -i 's/<IMAGE>/${{ env.IMAGE_REGISTERY }}\/${{ env.IMAGE_REPOSITORY }}\/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}/g' ${{ env.DEPLOYMENT_DEFINITION_PATH }}
        sed -i 's/<DEPLOYMENT_NAME>/${{ env.DEPLOYMENT_NAME }}/g' ${{ env.DEPLOYMENT_DEFINITION_PATH }}

    - name: Save DigitalOcean kubeconfig with short-lived credentials
      run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ secrets.CLUSTER_NAME }}

    - name: Deploy to DigitalOcean Kubernetes
      run: kubectl apply -f ${{ env.DEPLOYMENT_DEFINITION_PATH }}

    - name: Verify deployment
      run: kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }}